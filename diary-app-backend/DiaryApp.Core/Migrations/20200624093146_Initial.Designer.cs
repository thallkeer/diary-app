// <auto-generated />
using System;
using DiaryApp.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiaryApp.Core.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200624093146_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiaryApp.Core.AppUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiaryApp.Core.CommonList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DesiresAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdeasAreaID")
                        .HasColumnType("int");

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("DesiresAreaID");

                    b.HasIndex("IdeasAreaID")
                        .IsUnique()
                        .HasFilter("[IdeasAreaID] IS NOT NULL");

                    b.HasIndex("PageID");

                    b.ToTable("CommonLists");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CommonList");
                });

            modelBuilder.Entity("DiaryApp.Core.EventItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DiaryApp.Core.HabitsTracker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("GoalsAreaID")
                        .HasColumnType("int");

                    b.Property<string>("SelectedDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GoalsAreaID");

                    b.ToTable("HabitsTrackers");
                });

            modelBuilder.Entity("DiaryApp.Core.ListItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("ListItems");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.EventList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PageID");

                    b.ToTable("EventLists");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.TodoList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchasesAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("PageID");

                    b.HasIndex("PurchasesAreaID");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("DiaryApp.Core.PageAreaBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PageID");

                    b.ToTable("PageAreas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PageAreaBase");
                });

            modelBuilder.Entity("DiaryApp.Core.PageBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PageBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PageBase");
                });

            modelBuilder.Entity("DiaryApp.Core.TodoItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.DesireList", b =>
                {
                    b.HasBaseType("DiaryApp.Core.CommonList");

                    b.HasDiscriminator().HasValue("DesireList");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.Lists.IdeasList", b =>
                {
                    b.HasBaseType("DiaryApp.Core.CommonList");

                    b.HasDiscriminator().HasValue("IdeasList");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.PageAreas.DesiresArea", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageAreaBase");

                    b.HasDiscriminator().HasValue("DesiresArea");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.PageAreas.GoalsArea", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageAreaBase");

                    b.HasDiscriminator().HasValue("GoalsArea");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.PageAreas.IdeasArea", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageAreaBase");

                    b.HasDiscriminator().HasValue("IdeasArea");
                });

            modelBuilder.Entity("DiaryApp.Core.Models.PageAreas.PurchasesArea", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageAreaBase");

                    b.HasDiscriminator().HasValue("PurchasesArea");
                });

            modelBuilder.Entity("DiaryApp.Core.MainPage", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageBase");

                    b.HasDiscriminator().HasValue("MainPage");
                });

            modelBuilder.Entity("DiaryApp.Core.MonthPage", b =>
                {
                    b.HasBaseType("DiaryApp.Core.PageBase");

                    b.Property<int?>("DesiresAreaID")
                        .HasColumnType("int");

                    b.Property<int?>("GoalsAreaID")
                        .HasColumnType("int");

                    b.Property<int?>("IdeasAreaID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchasesAreaID")
                        .HasColumnType("int");

                    b.HasIndex("DesiresAreaID");

                    b.HasIndex("GoalsAreaID");

                    b.HasIndex("IdeasAreaID");

                    b.HasIndex("PurchasesAreaID");

                    b.HasDiscriminator().HasValue("MonthPage");
                });

            modelBuilder.Entity("DiaryApp.Core.CommonList", b =>
                {
                    b.HasOne("DiaryApp.Core.Models.PageAreas.DesiresArea", "DesiresArea")
                        .WithMany("DesiresLists")
                        .HasForeignKey("DesiresAreaID");

                    b.HasOne("DiaryApp.Core.Models.PageAreas.IdeasArea", "IdeasArea")
                        .WithOne("IdeasList")
                        .HasForeignKey("DiaryApp.Core.CommonList", "IdeasAreaID");

                    b.HasOne("DiaryApp.Core.PageBase", "Page")
                        .WithMany()
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.EventItem", b =>
                {
                    b.HasOne("DiaryApp.Core.Models.EventList", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.HabitsTracker", b =>
                {
                    b.HasOne("DiaryApp.Core.Models.PageAreas.GoalsArea", "GoalsArea")
                        .WithMany("GoalsLists")
                        .HasForeignKey("GoalsAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.ListItem", b =>
                {
                    b.HasOne("DiaryApp.Core.CommonList", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.Models.EventList", b =>
                {
                    b.HasOne("DiaryApp.Core.PageBase", "Page")
                        .WithMany()
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.Models.TodoList", b =>
                {
                    b.HasOne("DiaryApp.Core.PageBase", "Page")
                        .WithMany()
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiaryApp.Core.Models.PageAreas.PurchasesArea", "PurchasesArea")
                        .WithMany("PurchasesLists")
                        .HasForeignKey("PurchasesAreaID");
                });

            modelBuilder.Entity("DiaryApp.Core.PageAreaBase", b =>
                {
                    b.HasOne("DiaryApp.Core.PageBase", "Page")
                        .WithMany()
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.PageBase", b =>
                {
                    b.HasOne("DiaryApp.Core.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.TodoItem", b =>
                {
                    b.HasOne("DiaryApp.Core.Models.TodoList", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryApp.Core.MonthPage", b =>
                {
                    b.HasOne("DiaryApp.Core.Models.PageAreas.DesiresArea", "DesiresArea")
                        .WithMany()
                        .HasForeignKey("DesiresAreaID");

                    b.HasOne("DiaryApp.Core.Models.PageAreas.GoalsArea", "GoalsArea")
                        .WithMany()
                        .HasForeignKey("GoalsAreaID");

                    b.HasOne("DiaryApp.Core.Models.PageAreas.IdeasArea", "IdeasArea")
                        .WithMany()
                        .HasForeignKey("IdeasAreaID");

                    b.HasOne("DiaryApp.Core.Models.PageAreas.PurchasesArea", "PurchasesArea")
                        .WithMany()
                        .HasForeignKey("PurchasesAreaID");
                });
#pragma warning restore 612, 618
        }
    }
}
